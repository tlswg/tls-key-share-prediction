{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-10-10T01:36:45.405840+00:00",
  "repo": "tlswg/tls-key-share-prediction",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOKfBef850P5fk",
      "title": "Rephrase server selection algorithm to select a list from supported_groups",
      "url": "https://github.com/tlswg/tls-key-share-prediction/issues/1",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@bwesterb had an idea that we should say:\r\n1. Pick a set of equipreference groups from supported_groups\r\n2. Pick among the equipreference groups using key_share\r\n\r\nThat's probably a bit clearer. Filing this so I don't forget.",
      "createdAt": "2023-10-18T17:50:56Z",
      "updatedAt": "2024-03-18T05:45:49Z",
      "closedAt": "2024-03-18T05:45:49Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "This is moot with the simpler version.",
          "createdAt": "2024-03-18T05:45:42Z",
          "updatedAt": "2024-03-18T05:45:42Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOKfBef852lqx7",
      "title": "As an ECH extension?",
      "url": "https://github.com/tlswg/tls-key-share-prediction/issues/2",
      "state": "CLOSED",
      "author": "sayrer",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "One thing that occurred to me is that there are use cases that could require ECH, so it could be better to include this key-share-prediction in the ECHConfig in that case?\r\n\r\nhttps://www.ietf.org/archive/id/draft-ietf-tls-esni-17.html#name-configuration-extensions\r\n\r\nWouldn't that help the concerns about authenticity of DNS data in the draft's current SVCB?",
      "createdAt": "2023-11-12T21:36:37Z",
      "updatedAt": "2023-11-14T21:15:24Z",
      "closedAt": "2023-11-14T18:54:05Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see how this would help. An ECHConfig is no more authentic than anything else you get over DNS, and tying this to ECH doesn't make a whole lot of sense. (If you have multiple ECHConfigs in a single SVCB, they'd all have the same information.)",
          "createdAt": "2023-11-12T21:59:53Z",
          "updatedAt": "2023-11-12T21:59:53Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "NONE",
          "body": "If someone downgraded the hint in the ECHConfig, and the server requires ECH, wouldn't the handshake fail due to this step? https://www.ietf.org/archive/id/draft-ietf-tls-esni-17.html#section-6.1-5",
          "createdAt": "2023-11-14T17:49:36Z",
          "updatedAt": "2023-11-14T17:49:36Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "Then the server will handshake with the public name and we'd have much the same problem. Unless the outer ClientHello uses different key shares, but that defeats the point of doing a prediction.\r\n\r\nI also do not think it makes sense to tie this to ECH. The authenticity concerns are already resolved by fixing the negotiation algorithm, which is getting done in 8446bis. And resolving the authenticity concern does not remove the need to fix the negotiation algorithm because there are non-attacker-influenced problems here.",
          "createdAt": "2023-11-14T18:54:05Z",
          "updatedAt": "2023-11-14T18:54:05Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "NONE",
          "body": "I see, you're right as of the current ECH draft: `Otherwise, if all candidate ECHConfig values fail to decrypt the extension, the client-facing server MUST ignore the extension and proceed with the connection using ClientHelloOuter`\r\n\r\nI'm not sure the draft should require the server to proceed with the connection here, but that's for ECH.",
          "createdAt": "2023-11-14T18:59:40Z",
          "updatedAt": "2023-11-14T18:59:40Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "ECH is undeployable without that step. It's how the recovery flow works. Removing it would also break our ability to do GREASE.",
          "createdAt": "2023-11-14T19:01:23Z",
          "updatedAt": "2023-11-14T19:01:23Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "NONE",
          "body": "Oh, I'm not against that flow at all. I think you could get the same effect by sending no `retry_configs`* and refusing non-ECH ClientHello messages, though.\r\n\r\nAlso, I didn't mean to suggest this way /instead/ of what you have now. It just seemed like a better way if the server is going to require ECH.\r\n\r\n* (`If the server provided \"retry_configs\"`, Section [6.1.6](https://www.ietf.org/archive/id/draft-ietf-tls-esni-17.html#section-6.1.6))",
          "createdAt": "2023-11-14T19:17:04Z",
          "updatedAt": "2023-11-14T19:38:22Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "> Oh, I'm not against that flow at all. I think you could get the same effect by sending no retry_configs* and refusing non-ECH ClientHello messages, though.\r\n\r\nIn order to get that far, and authenticate the retry configs, we need the server to handshake with the public name, i.e. use the outer ClientHello.\r\n\r\nIt's also a bit late to be doing such a fundamental change to ECH.\r\n\r\n> Also, I didn't mean to suggest this way /instead/ of what you have now. It just seemed like a better way if the server is going to require ECH.\r\n\r\nI'm not very positive on defining two different redundant mechanisms, when one already fully handles the cases we care about. :-p",
          "createdAt": "2023-11-14T21:15:24Z",
          "updatedAt": "2023-11-14T21:15:24Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOKfBef86Bpdw3",
      "title": "Is it simpler to ban escapes or not in the presentation syntax?",
      "url": "https://github.com/tlswg/tls-key-share-prediction/issues/4",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The presentation language currently says:\r\n\r\n> The presentation `value` of the SvcParamValue is a comma-separated list ({{Appendix A.1 of I-D.ietf-dnsop-svcb-https}}) of decimal integers between 0 and 65535 (inclusive) in ASCII. Any other `value` is a syntax error. To enable simpler parsing, this SvcParam MUST NOT contain escape sequences.\r\n\r\n@martinthomson points out it's better to avoid special parsing rules. I think I borrowed this from https://www.rfc-editor.org/rfc/rfc9460.html#section-7.2-2 and inferred that avoiding the special parsing rule was the convention for presentation of 16-bit integers.\r\n\r\nI don't care either way and figure we should do whatever is conventional/convenient here. The behavior of \"port\" is a point towards banning escapes. But if folks think allowing them is better, that's cool too.\r\n\r\nSee https://github.com/davidben/tls-key-share-prediction/pull/3#discussion_r1516975880",
      "createdAt": "2024-03-08T01:54:24Z",
      "updatedAt": "2024-03-08T01:54:24Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 5,
      "id": "I_kwDOKfBef86BprtO",
      "title": "\"you say MUST, but do you really mean it?\"",
      "url": "https://github.com/tlswg/tls-key-share-prediction/issues/5",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It took me a while to understand how the safe/unsafe distinction and the server behaviour were intended to interact.\r\n\r\nThe mechanism seems a bit convoluted, but it boils down to a client needing to include key shares for its most-preferred groups, unless it can be confident that the server will do the right thing when a more-preferred group lacks a share (which is what this draft attempts to mandate).\r\n\r\nI would prefer not to include this mandate.  There are lots of reasons that this \"MUST\" might be ignored.\r\n\r\nMostly, it's just that an extra round trip is a giant pain. If you have a non-PQ share, but might prefer to use a hybrid-PQ KEM, you are faced with a choice: is your preference for hybrid-PQ greater than your preference for faster connection setup?  Do you need to factor in the current server load?\r\n\r\nUltimately, I would prefer to decouple the solution to this problem from the hinting stuff as much as possible.  I know that SVCB hints really amplify the risks, but I just don't see this going anywhere other than into RFC 6919 territory.",
      "createdAt": "2024-03-08T03:04:23Z",
      "updatedAt": "2024-03-18T05:45:16Z",
      "closedAt": "2024-03-18T05:45:16Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I struggled a lot with how to phrase this in a remotely coherent way. I guess, for the client, the main question is when is it safe to actually exercise RFC 8446's allowance to omit your most preferred groups in key shares. Which boils down to whether you believe OpenSSL's existing behavior is:\r\n\r\n1. An undesirable behavior that we account for because it's very common and, prior to key share prediction, there wasn't actually a problem so it'd be bad to introduce one\r\n2. An undesirable behavior we can ignore because it's a security bug and the server operator's responsibility to patch\r\n3. An explicit decision to treat all groups as equipreference, despite the documentation clearly describing otherwise\r\n\r\nAt the time I wrote this spec, I had interpreted it as (1) because (2) seemed a bit harsh, and would require clear consensus that this behavior is wrong. If we believe it's (1), I think we have to believe we need some kind of classification here.\r\n\r\nI didn't give much thought to (3) because the documentation clearly said otherwise. But, on reflection, I'm warming up to that option:\r\n* RFC 8446 already explicitly said \"However, the values MAY be a non-contiguous subset of the \"supported_groups\" extension and MAY omit the most preferred groups\". While it's kind of buried in there (I missed it at first!) and 8446bis's clarification is a much needed improvement, the spec was not *actually* ambiguous\r\n* OpenSSL's position seems to be (3) right now, despite the documentation mismatch.\r\n\r\nSo perhaps the thing to do is I'll go write OpenSSL's documentation fix for them, and then yeah take interpretation (3). Maybe include some very loose text here to the effect of \"clients, be aware that varying your key share set may allow attacker influence over the selected group... however, any influence will be within the confines of the server's selection policies. It is up to the server to not implement a stupid policy.\"",
          "createdAt": "2024-03-08T04:14:31Z",
          "updatedAt": "2024-03-08T04:55:13Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "New, much simpler version of draft done.",
          "createdAt": "2024-03-18T05:45:16Z",
          "updatedAt": "2024-03-18T05:45:16Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOKfBef86H4tYP",
      "title": "Repeated/duplicate values",
      "url": "https://github.com/tlswg/tls-key-share-prediction/issues/7",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If the format includes duplicates, is that an error?",
      "createdAt": "2024-05-05T23:29:26Z",
      "updatedAt": "2024-06-15T12:43:50Z",
      "closedAt": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess it should be a sender error, because that's incoherent. Whether the receiver should be required to check, I dunno. I'll go put together a PR to at least say this on the sender's end. (I'll leave the receiver ambiguous / this issue open.)",
          "createdAt": "2024-06-15T12:43:49Z",
          "updatedAt": "2024-06-15T12:43:49Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOKfBef86H4tdb",
      "title": "Example",
      "url": "https://github.com/tlswg/tls-key-share-prediction/issues/8",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "DNS RFCs always include the presentation form of something.  It's almost pointless here, but it might solidify things more.",
      "createdAt": "2024-05-05T23:30:30Z",
      "updatedAt": "2024-09-10T20:51:12Z",
      "closedAt": "2024-09-10T20:51:12Z",
      "comments": []
    },
    {
      "number": 11,
      "id": "I_kwDOKfBef86MW9-T",
      "title": "Is the downgrade protection story sufficient?",
      "url": "https://github.com/tlswg/tls-key-share-prediction/issues/11",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Filing this to track some feedback from @ekr that occurred during the adoption call, so I don't forget this is an open question:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/tls/HeSK-HzFWqKY_pIujWBUx6_W4ks/\r\nhttps://mailarchive.ietf.org/arch/msg/tls/Vh_sBURGTPaJnutdn08Q70mhMTY/\r\nhttps://mailarchive.ietf.org/arch/msg/tls/Y4T_9spLsbtcErYLZlvNqtwN5eA/",
      "createdAt": "2024-06-15T12:41:28Z",
      "updatedAt": "2024-06-15T12:41:29Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 3,
      "id": "PR_kwDOKfBef85pBvZ_",
      "title": "Range of valid values",
      "url": "https://github.com/tlswg/tls-key-share-prediction/pull/3",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I know that 0..65536 is typically inclusive at the start and exclusive at the end in a lot of contexts, but it's best to spell things out.",
      "createdAt": "2024-03-07T23:24:23Z",
      "updatedAt": "2024-03-08T01:50:59Z",
      "baseRepository": "tlswg/tls-key-share-prediction",
      "baseRefName": "main",
      "baseRefOid": "310fa7bbddd1fe0c81e3a6865a59880efc901b33",
      "headRepository": "martinthomson/tls-key-share-prediction",
      "headRefName": "patch-1",
      "headRefOid": "f5272570d12f2aaa74aba2681d8eb2a87b417861",
      "closedAt": "2024-03-08T01:50:58Z",
      "mergedAt": "2024-03-08T01:50:58Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "393e39396a9da484a9380d07500e17095cc79b48"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh thanks! Yeah, I'm pretty sure that was just a typo on my part. :-)",
          "createdAt": "2024-03-08T01:47:10Z",
          "updatedAt": "2024-03-08T01:47:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKfBef85yqk7n",
          "commit": {
            "abbreviatedOid": "f527257"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-07T23:24:49Z",
          "updatedAt": "2024-03-07T23:24:50Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I would also trim the last sentence.  Special parsing rules are special and therefore should be avoided.",
              "createdAt": "2024-03-07T23:24:50Z",
              "updatedAt": "2024-03-07T23:24:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKfBef85yrDBx",
          "commit": {
            "abbreviatedOid": "f527257"
          },
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-08T01:50:32Z",
          "updatedAt": "2024-03-08T01:50:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I don't feel very strongly either way. I guess it's a question of how parsers for these things tend to look. I just borrowed this phrasing (except then I picked up a typo) from https://www.rfc-editor.org/rfc/rfc9460.html#section-7.2-2, so I inferred banning escapes was preferable. \ud83e\udd37 \r\n\r\nHappy to do whatever DNS people like. I have no experience parsing these presentation values and likely never will.\r\n\r\n(Figure I'll merge this PR as-is and we can sort that out separately.)",
              "createdAt": "2024-03-08T01:50:32Z",
              "updatedAt": "2024-03-08T01:50:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKfBef85yrDFM",
          "commit": {
            "abbreviatedOid": "f527257"
          },
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-08T01:50:51Z",
          "updatedAt": "2024-03-08T01:50:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOKfBef85pqxQn",
      "title": "Decide servers should have accounted for this already",
      "url": "https://github.com/tlswg/tls-key-share-prediction/pull/6",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This cuts the document by about half.\r\n\r\nIn the original version of this document, I assumed that attacker control over the key_share list was a novel scenario that servers were not expected to previously account for. After all, we went through quite a lot of trouble to capture both ClientHellos in the handshake transcript.\r\n\r\nOn reflection after MT filed issue #5, I think that was too timid of a position. Although rfc8446bis improves the wording, RFC 8446 *already* was quite clear that the key_share list may be an arbitrary subset of the supported_groups list and doesn't reflect the full preferences. So we can reasonably claim that any key_share-first server either:\r\n\r\n* has considered this and believes the groups are comparable in preference, or\r\n\r\n* did not understand the protocol and failed to implement their desired policy correctly.\r\n\r\nThe first is a perfectly valid choice. It's not a good choice between ECDH and post-quantum, but it's perfectly defensible between post-quantum options or between two ECDH curves. The second is a server bug and the server's responsibility to fix, even if it is exacerbated by new client behavior.\r\n\r\nIf we believe that, there is nothing wrong with a client predicting `key_share` based on any heuristic, be it DNS, random probes to avoid compat risks of large ClientHellos, whatever you negotiated previously, the phase of the moon, racing two connections, or a popularity contest. So now all the stuff around prediction-safe vs prediction-unsafe groups is cut, and we just include a discussion in Security Considerations that this was okay.",
      "createdAt": "2024-03-14T18:47:41Z",
      "updatedAt": "2024-03-18T02:52:45Z",
      "baseRepository": "tlswg/tls-key-share-prediction",
      "baseRefName": "main",
      "baseRefOid": "3d48a82a0a4a745fb3eab6f7ca40349382227362",
      "headRepository": "tlswg/tls-key-share-prediction",
      "headRefName": "just-decide-its-okay",
      "headRefOid": "421f1a8a2375d495de7a5ee9c8b4a8d8b333ae36",
      "closedAt": "2024-03-18T02:52:41Z",
      "mergedAt": "2024-03-18T02:52:40Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "d3852e8127a3ae7168847c50c8a1908540c49153"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson and @ekr, curious how you feel about this.",
          "createdAt": "2024-03-14T18:48:04Z",
          "updatedAt": "2024-03-14T18:48:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "Since PR guts the whole document, this link is probably easier to read than the diff:\r\nhttps://davidben.github.io/tls-key-share-prediction/just-decide-its-okay/draft-davidben-tls-key-share-prediction.html",
          "createdAt": "2024-03-14T18:49:52Z",
          "updatedAt": "2024-03-14T18:49:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOKfBef85xdoF-",
      "title": "Add an example encoding, for both presentation and wire formats",
      "url": "https://github.com/tlswg/tls-key-share-prediction/pull/9",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #8.",
      "createdAt": "2024-06-04T19:08:13Z",
      "updatedAt": "2024-09-10T20:51:14Z",
      "baseRepository": "tlswg/tls-key-share-prediction",
      "baseRefName": "main",
      "baseRefOid": "3e9292bc18aba78d16e382e4e4ca23898809d2ad",
      "headRepository": "tlswg/tls-key-share-prediction",
      "headRefName": "example",
      "headRefOid": "d79c228395a592bc9adf8a8a90fcd6ec4e134db5",
      "closedAt": "2024-09-10T20:51:11Z",
      "mergedAt": "2024-09-10T20:51:11Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "5bedece39d7bb79ab81ac5e39192a001c8a67432"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson this look good to you?",
          "createdAt": "2024-06-04T19:08:27Z",
          "updatedAt": "2024-06-04T19:08:27Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "Incorporated your example with some minor fixups to the surrounding text.",
          "createdAt": "2024-06-13T21:57:25Z",
          "updatedAt": "2024-06-13T21:57:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKfBef859uEp3",
          "commit": {
            "abbreviatedOid": "763299a"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This helps, but I was thinking",
          "createdAt": "2024-06-11T03:33:20Z",
          "updatedAt": "2024-06-11T03:33:24Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This helps, but I was thinking something like this:\r\n\r\n`````suggestion\r\n\r\n``` dns\r\nexample.net.  7200  IN SVCB 3 server.example.net. (\r\n    port=\"8004\" tls-supported-groups=29,23 )\r\n```\r\n`````\r\n\r\n(I'm now uncertain about that syntax though)",
              "createdAt": "2024-06-11T03:33:20Z",
              "updatedAt": "2024-06-11T03:34:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKfBef86It6EN",
          "commit": {
            "abbreviatedOid": "d79c228"
          },
          "author": "bob-beck",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-10T20:45:26Z",
          "updatedAt": "2024-09-10T20:45:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 12,
      "id": "PR_kwDOKfBef85yj5aB",
      "title": "The list should not have duplicates",
      "url": "https://github.com/tlswg/tls-key-share-prediction/pull/12",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Having duplicates in there is pretty incoherent. See issue #7.",
      "createdAt": "2024-06-15T12:49:28Z",
      "updatedAt": "2024-06-15T14:18:03Z",
      "baseRepository": "tlswg/tls-key-share-prediction",
      "baseRefName": "main",
      "baseRefOid": "3e9292bc18aba78d16e382e4e4ca23898809d2ad",
      "headRepository": "tlswg/tls-key-share-prediction",
      "headRefName": "non-repeating",
      "headRefOid": "d58fe72f0067be3129e8db60dfbeea66ef3010e7",
      "closedAt": "2024-06-15T14:18:00Z",
      "mergedAt": "2024-06-15T14:18:00Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "c11fac92ecee67543bfbc051f8f13dcdb2f57edb"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson ",
          "createdAt": "2024-06-15T12:49:35Z",
          "updatedAt": "2024-06-15T12:49:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKfBef85-Y0Iy",
          "commit": {
            "abbreviatedOid": "380695f"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-15T13:06:25Z",
          "updatedAt": "2024-06-15T13:06:44Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThe wire format of the SvcParamValue is a sequence of 2-octet numeric values in network byte order. An empty list of values is invalid, as is a list containing duplicates.\r\n```",
              "createdAt": "2024-06-15T13:06:25Z",
              "updatedAt": "2024-06-15T13:06:44Z"
            }
          ]
        }
      ]
    }
  ]
}